---
swagger: "2.0"
info:
  description: "Satstream API"
  version: "1.0"
  title: "Satstream API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name: "Satstream"
    email: "team@satstream.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8085"
basePath: "/api/v1"
paths:
  /addresses/{address}/balance:
    get:
      tags:
      - "Addresses"
      summary: "Get address balance"
      description: "Get the current balance of a Bitcoin address"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "address"
        in: "path"
        description: "Bitcoin address"
        required: true
        type: "string"
        x-exportParamName: "Address"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/responses.GetAddressBalance"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/responses.BaseResponse"
  /addresses/{address}/balance/timeframe:
    get:
      tags:
      - "Addresses"
      summary: "Get address timeframe balance"
      description: "Get the balance of a Bitcoin address for a specific timeframe"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "address"
        in: "path"
        description: "Bitcoin address"
        required: true
        type: "string"
        x-exportParamName: "Address"
      - name: "start"
        in: "query"
        description: "Start block height"
        required: true
        type: "integer"
        x-exportParamName: "Start"
      - name: "end"
        in: "query"
        description: "End block height"
        required: true
        type: "integer"
        x-exportParamName: "End"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/responses.GetAddressTimeframeBalance"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/responses.BaseResponse"
  /addresses/{address}/runes:
    get:
      tags:
      - "Addresses"
      summary: "Get address runes balance list"
      description: "Get the balance of all runes for a Bitcoin address"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "address"
        in: "path"
        description: "Bitcoin address"
        required: true
        type: "string"
        x-exportParamName: "Address"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/responses.BaseResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/responses.BaseResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/responses.BaseResponse"
  /addresses/{address}/runes/{runeid}:
    get:
      tags:
      - "Addresses"
      summary: "Get address rune balance"
      description: "Get the balance of a specific rune for a Bitcoin address"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "address"
        in: "path"
        description: "Bitcoin address"
        required: true
        type: "string"
        x-exportParamName: "Address"
      - name: "runeid"
        in: "path"
        description: "Rune ID"
        required: true
        type: "string"
        x-exportParamName: "Runeid"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/responses.GetAddressRuneBalance"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/responses.BaseResponse"
  /addresses/{address}/utxos:
    get:
      tags:
      - "Addresses"
      summary: "Get address non-inscription UTXOs"
      description: "Get all non-inscription UTXOs for a Bitcoin address"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "address"
        in: "path"
        description: "Bitcoin address"
        required: true
        type: "string"
        x-exportParamName: "Address"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/responses.GetAddressNonInscriptionUTXOData"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/responses.BaseResponse"
  /blocks/current-height:
    get:
      tags:
      - "Blocks"
      summary: "Get current block height"
      description: "Get the current block height of the Bitcoin blockchain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "integer"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
  /blocks/hash/{hash}:
    get:
      tags:
      - "Blocks"
      summary: "Get block by hash"
      description: "Get information about a specific block by its hash"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "hash"
        in: "path"
        description: "Block hash"
        required: true
        type: "string"
        x-exportParamName: "Hash"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/rpc.Block"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
  /blocks/{height}:
    get:
      tags:
      - "Blocks"
      summary: "Get block info"
      description: "Get information about a specific block by height"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "height"
        in: "path"
        description: "Block height"
        required: true
        type: "integer"
        x-exportParamName: "Height"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/rpc.Block"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
  /blocks/{height}/transactions:
    get:
      tags:
      - "Blocks"
      summary: "Get block transactions"
      description: "Get transactions for a specific block height"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "height"
        in: "path"
        description: "Block height"
        required: true
        type: "integer"
        x-exportParamName: "Height"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/store.TransactionDocument"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
  /fees:
    get:
      tags:
      - "Fees"
      summary: "Get recommended fees"
      description: "Get recommended fees for Bitcoin transactions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
            additionalProperties:
              type: "number"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
  /indexer/tx/{hash}:
    get:
      tags:
      - "Transactions"
      summary: "Get transaction"
      description: "Get a transaction by its hash"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "hash"
        in: "path"
        description: "Transaction hash"
        required: true
        type: "string"
        x-exportParamName: "Hash"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/rpc.BtcTx"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ss_api_server_api_transactions_responses.ErrorResponse"
  /mempool/addresses/{address}/transactions:
    get:
      tags:
      - "Mempool"
      summary: "Get address mempool transactions"
      description: "Get all mempool transactions for a specific address"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "address"
        in: "path"
        description: "Bitcoin address"
        required: true
        type: "string"
        x-exportParamName: "Address"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/rpc.BtcTx"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
  /mempool/transactions:
    get:
      tags:
      - "Mempool"
      summary: "Get mempool transactions"
      description: "Get all transactions currently in the mempool"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/rpc.BtcTx"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
  /mempool/transactions/{txid}:
    get:
      tags:
      - "Mempool"
      summary: "Get mempool transaction info"
      description: "Get information about a specific transaction in the mempool"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "txid"
        in: "path"
        description: "Transaction ID"
        required: true
        type: "string"
        x-exportParamName: "Txid"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/rpc.BtcTx"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/api.ErrorResponse"
  /runes:
    get:
      tags:
      - "Runes"
      summary: "Get runes info list"
      description: "Get information about all runes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ss_api_server_api_runes_responses.ErrorResponse"
  /runes/status:
    get:
      tags:
      - "Runes"
      summary: "Get runes status"
      description: "Get the current status of the runes system"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ss_api_server_api_runes_responses.ErrorResponse"
  /runes/{runeId}:
    get:
      tags:
      - "Runes"
      summary: "Get rune info"
      description: "Get detailed information about a specific rune"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "runeId"
        in: "path"
        description: "Rune ID"
        required: true
        type: "string"
        x-exportParamName: "RuneId"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ss_api_server_api_runes_responses.ErrorResponse"
  /runes/{runeId}/holders:
    get:
      tags:
      - "Runes"
      summary: "Get rune holders"
      description: "Get a list of addresses holding a specific rune"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "runeId"
        in: "path"
        description: "Rune ID"
        required: true
        type: "string"
        x-exportParamName: "RuneId"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ss_api_server_api_runes_responses.ErrorResponse"
  /transactions/broadcast:
    post:
      tags:
      - "Transactions"
      summary: "Broadcast transaction"
      description: "Broadcast a raw transaction to the Bitcoin network"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "transaction"
        description: "Raw transaction hex"
        required: true
        schema:
          type: "string"
        x-exportParamName: "Transaction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/responses.SendRawTransaction"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ss_api_server_api_transactions_responses.ErrorResponse"
  /transactions/{txid}:
    get:
      tags:
      - "Transactions"
      summary: "Get transaction info"
      description: "Get detailed information about a specific transaction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "txid"
        in: "path"
        description: "Transaction ID"
        required: true
        type: "string"
        x-exportParamName: "Txid"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/rpc.BtcTx"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ss_api_server_api_transactions_responses.ErrorResponse"
  /transactions/{txid}/inputs:
    get:
      tags:
      - "Transactions"
      summary: "Get transaction inputs"
      description: "Get the inputs of a specific transaction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "txid"
        in: "path"
        description: "Transaction ID"
        required: true
        type: "string"
        x-exportParamName: "Txid"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/rpc.Vin"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ss_api_server_api_transactions_responses.ErrorResponse"
  /user/api-keys:
    get:
      tags:
      - "User"
      summary: "Get API keys"
      description: "Get all API keys for the authenticated user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/types.ApiKey"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ss_api_server_app_apikeys_responses.ErrorResponse"
  /user/api-keys/{id}:
    delete:
      tags:
      - "User"
      summary: "Delete API key"
      description: "Delete a specific API key for the authenticated user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "API key ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
            additionalProperties: true
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ss_api_server_app_apikeys_responses.ErrorResponse"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/ss_api_server_app_apikeys_responses.ErrorResponse"
  /user/apps:
    get:
      tags:
      - "User"
      summary: "Get user apps"
      description: "Get all apps for the authenticated user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/types.UserApp"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ss_api_server_app_userapps_responses.ErrorResponse"
    post:
      tags:
      - "User"
      summary: "Create user app"
      description: "Create a new app for the authenticated user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "app"
        description: "App details"
        required: true
        schema:
          $ref: "#/definitions/requests.CreateUserAppRequest"
        x-exportParamName: "App"
      security:
      - ApiKeyAuth: []
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/types.UserApp"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ss_api_server_app_userapps_responses.ErrorResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ss_api_server_app_userapps_responses.ErrorResponse"
  /user/apps/{app_id}:
    get:
      tags:
      - "User"
      summary: "Get user app"
      description: "Get a specific app for the authenticated user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "app_id"
        in: "path"
        description: "App ID"
        required: true
        type: "string"
        x-exportParamName: "AppId"
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/types.UserApp"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ss_api_server_app_userapps_responses.ErrorResponse"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/ss_api_server_app_userapps_responses.ErrorResponse"
  /user/payments/create-intent:
    post:
      tags:
      - "User"
      summary: "Create payment intent"
      description: "Create a payment intent for the authenticated user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "intent"
        description: "Payment intent details"
        required: true
        schema:
          $ref: "#/definitions/requests.CreatePaymentIntentRequest"
        x-exportParamName: "Intent"
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/responses.CreatePaymentIntentResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ss_api_server_app_payments_responses.ErrorResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ss_api_server_app_payments_responses.ErrorResponse"
  /user/refresh-token:
    post:
      tags:
      - "User"
      summary: "Refresh token"
      description: "Refresh the authentication token for the current user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/responses.RefreshTokenResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ss_api_server_app_users_responses.ErrorResponse"
  /user/subscriptions:
    get:
      tags:
      - "User"
      summary: "Get active subscription"
      description: "Get the active subscription for the authenticated user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/types.Subscription"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ss_api_server_app_subscriptions_responses.ErrorResponse"
definitions:
  api.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      data: {}
      msg:
        type: "string"
  big.Int:
    type: "object"
  requests.CreatePaymentIntentRequest:
    type: "object"
    properties:
      new_tier:
        type: "string"
      subscription_id:
        type: "string"
  requests.CreateUserAppRequest:
    type: "object"
    properties:
      name:
        type: "string"
  responses.BaseResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      data: {}
      msg:
        type: "string"
    example:
      msg: "msg"
      code: 0
      data: ""
  responses.BlockRange:
    type: "object"
    properties:
      end:
        type: "integer"
      start:
        type: "integer"
  responses.CreatePaymentIntentResponse:
    type: "object"
    properties:
      client_secret:
        type: "string"
    example:
      client_secret: "client_secret"
  responses.GetAddressBalance:
    type: "object"
    properties:
      address:
        type: "string"
      balance:
        type: "number"
    example:
      address: "address"
      balance: 0.80082819046101150206595775671303272247314453125
  responses.GetAddressNonInscriptionUTXOData:
    type: "object"
    properties:
      cursor:
        type: "integer"
      total:
        type: "integer"
      totalConfirmed:
        type: "integer"
      totalRunes:
        type: "integer"
      totalUnconfirmed:
        type: "integer"
      totalUnconfirmedSpend:
        type: "integer"
      utxo:
        type: "array"
        items:
          $ref: "#/definitions/responses.NonInscriptionUTXO"
    example:
      cursor: 0
      totalUnconfirmed: 5
      utxo:
      - satoshi: {}
        scriptPk: "scriptPk"
        address: "address"
        codeType: 7
        isSpent: true
        scriptType: "scriptType"
        txid: "txid"
        idx: 3
        isOpInRBF: true
        height: 9
        vout: 2
      - satoshi: {}
        scriptPk: "scriptPk"
        address: "address"
        codeType: 7
        isSpent: true
        scriptType: "scriptType"
        txid: "txid"
        idx: 3
        isOpInRBF: true
        height: 9
        vout: 2
      total: 6
      totalUnconfirmedSpend: 2
      totalRunes: 5
      totalConfirmed: 1
  responses.GetAddressRuneBalance:
    type: "object"
    properties:
      amount:
        type: "integer"
      divisibility:
        type: "integer"
      rune:
        type: "string"
      runeid:
        type: "string"
      spacedRune:
        type: "string"
      symbol:
        type: "string"
    example:
      symbol: "symbol"
      amount: 0
      spacedRune: "spacedRune"
      runeid: "runeid"
      divisibility: 6
      rune: "rune"
  responses.GetAddressRunesBalanceListItem:
    type: "object"
    properties:
      amount:
        type: "integer"
        example: 52286
      rune_id:
        type: "string"
        example: "840000:3"
      spacedRune:
        type: "string"
        example: "DECENTRALIZED"
    example:
      amount: 52286
      spacedRune: "DECENTRALIZED"
      rune_id: "840000:3"
  responses.GetAddressTimeframeBalance:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/responses.GetAddressTimeframeBalanceItem"
    example:
      items:
      - balance: 0.80082819046101150206595775671303272247314453125
        blockRange: {}
      - balance: 0.80082819046101150206595775671303272247314453125
        blockRange: {}
  responses.GetAddressTimeframeBalanceItem:
    type: "object"
    properties:
      balance:
        type: "number"
      blockRange:
        $ref: "responses.GetAddressTimeframeBalanceItem_blockRange"
    example:
      balance: 0.80082819046101150206595775671303272247314453125
      blockRange: {}
  responses.NonInscriptionUTXO:
    type: "object"
    properties:
      address:
        type: "string"
      codeType:
        type: "integer"
      height:
        type: "integer"
      idx:
        type: "integer"
      isOpInRBF:
        type: "boolean"
      isSpent:
        type: "boolean"
      satoshi:
        $ref: "#/definitions/big.Int"
      scriptPk:
        type: "string"
      scriptType:
        type: "string"
      txid:
        type: "string"
      vout:
        type: "integer"
    example:
      satoshi: {}
      scriptPk: "scriptPk"
      address: "address"
      codeType: 7
      isSpent: true
      scriptType: "scriptType"
      txid: "txid"
      idx: 3
      isOpInRBF: true
      height: 9
      vout: 2
  responses.RefreshTokenResponse:
    type: "object"
    properties:
      expires_in:
        type: "string"
      id_token:
        type: "string"
      refresh_token:
        type: "string"
    example:
      refresh_token: "refresh_token"
      id_token: "id_token"
      expires_in: "expires_in"
  responses.SendRawTransaction:
    type: "object"
    properties:
      tx_hash:
        type: "string"
    example:
      tx_hash: "tx_hash"
  rpc.Block:
    type: "object"
    properties:
      bits:
        type: "string"
      chainwork:
        type: "string"
      confirmations:
        type: "integer"
      difficulty:
        type: "number"
      hash:
        type: "string"
      height:
        type: "integer"
      mediantime:
        type: "integer"
      merkleroot:
        type: "string"
      nTx:
        type: "integer"
      nonce:
        type: "integer"
      previousblockhash:
        type: "string"
      size:
        type: "integer"
      strippedSize:
        type: "integer"
      time:
        type: "integer"
      tx:
        type: "array"
        description: "Txns will be stored in a separate collection in the DB"
        items:
          $ref: "#/definitions/rpc.BtcTx"
      version:
        type: "integer"
      versionHex:
        type: "string"
      weight:
        type: "integer"
    example:
      mediantime: 5
      tx:
      - vsize: 6
        locktime: 1
        fee: 4.1456080298839363962315474054776132106781005859375
        index: 7
        txid: "txid"
        weight: 8
        version: 1
        blockheight: 2
        vout:
        - scriptPubKey:
            address: "address"
            asm: "asm"
            hex: "hex"
            type: "type"
            desc: "desc"
          rune_holdings:
          - amount: {}
            rune_id: "rune_id"
          - amount: {}
            rune_id: "rune_id"
          value: 9.3693102714106686335071572102606296539306640625
          "n": 9
        - scriptPubKey:
            address: "address"
            asm: "asm"
            hex: "hex"
            type: "type"
            desc: "desc"
          rune_holdings:
          - amount: {}
            rune_id: "rune_id"
          - amount: {}
            rune_id: "rune_id"
          value: 9.3693102714106686335071572102606296539306640625
          "n": 9
        size: 1
        hex: "hex"
        vin:
        - sequence: 4
          coinbase: "coinbase"
          prevout:
            scriptPubKey:
              address: "address"
              asm: "asm"
              hex: "hex"
              type: "type"
              desc: "desc"
            populated: true
            rune_holdings:
            - amount: {}
              rune_id: "rune_id"
            - amount: {}
              rune_id: "rune_id"
            value: 1.173074250955943309548956676735542714595794677734375
            "n": 7
            height: 6
          scriptSig:
            asm: "asm"
            hex: "hex"
          txid: "txid"
          txinwitness:
          - "txinwitness"
          - "txinwitness"
          vout: 5
        - sequence: 4
          coinbase: "coinbase"
          prevout:
            scriptPubKey:
              address: "address"
              asm: "asm"
              hex: "hex"
              type: "type"
              desc: "desc"
            populated: true
            rune_holdings:
            - amount: {}
              rune_id: "rune_id"
            - amount: {}
              rune_id: "rune_id"
            value: 1.173074250955943309548956676735542714595794677734375
            "n": 7
            height: 6
          scriptSig:
            asm: "asm"
            hex: "hex"
          txid: "txid"
          txinwitness:
          - "txinwitness"
          - "txinwitness"
          vout: 5
        hash: "hash"
      - vsize: 6
        locktime: 1
        fee: 4.1456080298839363962315474054776132106781005859375
        index: 7
        txid: "txid"
        weight: 8
        version: 1
        blockheight: 2
        vout:
        - scriptPubKey:
            address: "address"
            asm: "asm"
            hex: "hex"
            type: "type"
            desc: "desc"
          rune_holdings:
          - amount: {}
            rune_id: "rune_id"
          - amount: {}
            rune_id: "rune_id"
          value: 9.3693102714106686335071572102606296539306640625
          "n": 9
        - scriptPubKey:
            address: "address"
            asm: "asm"
            hex: "hex"
            type: "type"
            desc: "desc"
          rune_holdings:
          - amount: {}
            rune_id: "rune_id"
          - amount: {}
            rune_id: "rune_id"
          value: 9.3693102714106686335071572102606296539306640625
          "n": 9
        size: 1
        hex: "hex"
        vin:
        - sequence: 4
          coinbase: "coinbase"
          prevout:
            scriptPubKey:
              address: "address"
              asm: "asm"
              hex: "hex"
              type: "type"
              desc: "desc"
            populated: true
            rune_holdings:
            - amount: {}
              rune_id: "rune_id"
            - amount: {}
              rune_id: "rune_id"
            value: 1.173074250955943309548956676735542714595794677734375
            "n": 7
            height: 6
          scriptSig:
            asm: "asm"
            hex: "hex"
          txid: "txid"
          txinwitness:
          - "txinwitness"
          - "txinwitness"
          vout: 5
        - sequence: 4
          coinbase: "coinbase"
          prevout:
            scriptPubKey:
              address: "address"
              asm: "asm"
              hex: "hex"
              type: "type"
              desc: "desc"
            populated: true
            rune_holdings:
            - amount: {}
              rune_id: "rune_id"
            - amount: {}
              rune_id: "rune_id"
            value: 1.173074250955943309548956676735542714595794677734375
            "n": 7
            height: 6
          scriptSig:
            asm: "asm"
            hex: "hex"
          txid: "txid"
          txinwitness:
          - "txinwitness"
          - "txinwitness"
          vout: 5
        hash: "hash"
      previousblockhash: "previousblockhash"
      bits: "bits"
      weight: 6
      strippedSize: 9
      versionHex: "versionHex"
      confirmations: 0
      nonce: 2
      version: 9
      difficulty: 6.02745618307040320615897144307382404804229736328125
      chainwork: "chainwork"
      nTx: 5
      size: 7
      merkleroot: "merkleroot"
      time: 3
      hash: "hash"
      height: 1
  rpc.BtcTx:
    type: "object"
    properties:
      blockheight:
        type: "integer"
      fee:
        type: "number"
      hash:
        type: "string"
      hex:
        type: "string"
      index:
        type: "integer"
      locktime:
        type: "integer"
      size:
        type: "integer"
      txid:
        type: "string"
      version:
        type: "integer"
      vin:
        type: "array"
        description: "Vin will be stored in a separate collection in the DB"
        items:
          $ref: "#/definitions/rpc.Vin"
      vout:
        type: "array"
        description: "Vout will be stored in a separate collection in the DB"
        items:
          $ref: "#/definitions/rpc.Vout"
      vsize:
        type: "integer"
      weight:
        type: "integer"
    example:
      vsize: 6
      locktime: 1
      fee: 4.1456080298839363962315474054776132106781005859375
      index: 7
      txid: "txid"
      weight: 8
      version: 1
      blockheight: 2
      vout:
      - scriptPubKey:
          address: "address"
          asm: "asm"
          hex: "hex"
          type: "type"
          desc: "desc"
        rune_holdings:
        - amount: {}
          rune_id: "rune_id"
        - amount: {}
          rune_id: "rune_id"
        value: 9.3693102714106686335071572102606296539306640625
        "n": 9
      - scriptPubKey:
          address: "address"
          asm: "asm"
          hex: "hex"
          type: "type"
          desc: "desc"
        rune_holdings:
        - amount: {}
          rune_id: "rune_id"
        - amount: {}
          rune_id: "rune_id"
        value: 9.3693102714106686335071572102606296539306640625
        "n": 9
      size: 1
      hex: "hex"
      vin:
      - sequence: 4
        coinbase: "coinbase"
        prevout:
          scriptPubKey:
            address: "address"
            asm: "asm"
            hex: "hex"
            type: "type"
            desc: "desc"
          populated: true
          rune_holdings:
          - amount: {}
            rune_id: "rune_id"
          - amount: {}
            rune_id: "rune_id"
          value: 1.173074250955943309548956676735542714595794677734375
          "n": 7
          height: 6
        scriptSig:
          asm: "asm"
          hex: "hex"
        txid: "txid"
        txinwitness:
        - "txinwitness"
        - "txinwitness"
        vout: 5
      - sequence: 4
        coinbase: "coinbase"
        prevout:
          scriptPubKey:
            address: "address"
            asm: "asm"
            hex: "hex"
            type: "type"
            desc: "desc"
          populated: true
          rune_holdings:
          - amount: {}
            rune_id: "rune_id"
          - amount: {}
            rune_id: "rune_id"
          value: 1.173074250955943309548956676735542714595794677734375
          "n": 7
          height: 6
        scriptSig:
          asm: "asm"
          hex: "hex"
        txid: "txid"
        txinwitness:
        - "txinwitness"
        - "txinwitness"
        vout: 5
      hash: "hash"
  rpc.PrevOut:
    type: "object"
    properties:
      height:
        type: "integer"
      "n":
        type: "integer"
      populated:
        type: "boolean"
        description: "* The populated field is used to determine if the prevout has\
          \ been populated from our code or automatically by the RPC on fetch"
      rune_holdings:
        type: "array"
        items:
          $ref: "#/definitions/rpc.UtxoRune"
      scriptPubKey:
        $ref: "#/definitions/rpc.ScriptPubKey"
      value:
        type: "number"
    example:
      scriptPubKey:
        address: "address"
        asm: "asm"
        hex: "hex"
        type: "type"
        desc: "desc"
      populated: true
      rune_holdings:
      - amount: {}
        rune_id: "rune_id"
      - amount: {}
        rune_id: "rune_id"
      value: 1.173074250955943309548956676735542714595794677734375
      "n": 7
      height: 6
  rpc.ScriptPubKey:
    type: "object"
    properties:
      address:
        type: "string"
      asm:
        type: "string"
      desc:
        type: "string"
      hex:
        type: "string"
      type:
        type: "string"
    example:
      address: "address"
      asm: "asm"
      hex: "hex"
      type: "type"
      desc: "desc"
  rpc.ScriptSig:
    type: "object"
    properties:
      asm:
        type: "string"
      hex:
        type: "string"
    example:
      asm: "asm"
      hex: "hex"
  rpc.UtxoRune:
    type: "object"
    properties:
      amount:
        $ref: "#/definitions/big.Int"
      rune_id:
        type: "string"
    example:
      amount: {}
      rune_id: "rune_id"
  rpc.Vin:
    type: "object"
    properties:
      coinbase:
        type: "string"
      prevout:
        $ref: "#/definitions/rpc.PrevOut"
      scriptSig:
        $ref: "#/definitions/rpc.ScriptSig"
      sequence:
        type: "integer"
      txid:
        type: "string"
      txinwitness:
        type: "array"
        items:
          type: "string"
      vout:
        type: "integer"
    example:
      sequence: 4
      coinbase: "coinbase"
      prevout:
        scriptPubKey:
          address: "address"
          asm: "asm"
          hex: "hex"
          type: "type"
          desc: "desc"
        populated: true
        rune_holdings:
        - amount: {}
          rune_id: "rune_id"
        - amount: {}
          rune_id: "rune_id"
        value: 1.173074250955943309548956676735542714595794677734375
        "n": 7
        height: 6
      scriptSig:
        asm: "asm"
        hex: "hex"
      txid: "txid"
      txinwitness:
      - "txinwitness"
      - "txinwitness"
      vout: 5
  rpc.Vout:
    type: "object"
    properties:
      "n":
        type: "integer"
      rune_holdings:
        type: "array"
        items:
          $ref: "#/definitions/rpc.UtxoRune"
      scriptPubKey:
        $ref: "#/definitions/rpc.ScriptPubKey"
      value:
        type: "number"
    example:
      scriptPubKey:
        address: "address"
        asm: "asm"
        hex: "hex"
        type: "type"
        desc: "desc"
      rune_holdings:
      - amount: {}
        rune_id: "rune_id"
      - amount: {}
        rune_id: "rune_id"
      value: 9.3693102714106686335071572102606296539306640625
      "n": 9
  ss_api_server_api_runes_responses.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      data: {}
      msg:
        type: "string"
  ss_api_server_api_transactions_responses.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      data: {}
      msg:
        type: "string"
  ss_api_server_app_apikeys_responses.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      data: {}
      msg:
        type: "string"
  ss_api_server_app_payments_responses.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      data: {}
      msg:
        type: "string"
  ss_api_server_app_subscriptions_responses.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      data: {}
      msg:
        type: "string"
  ss_api_server_app_userapps_responses.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      data: {}
      msg:
        type: "string"
  ss_api_server_app_users_responses.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      data: {}
      msg:
        type: "string"
  store.TransactionDocument:
    type: "object"
    properties:
      address:
        type: "string"
        example: "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2"
      blockheight:
        type: "integer"
        example: 100
      fee:
        type: "number"
        example: 0.001
      hash:
        type: "string"
        example: "0000000000000000000000000000000000000000000000000000000000000000"
      hex:
        type: "string"
        example: "0000000000000000000000000000000000000000000000000000000000000000"
      index:
        type: "integer"
        example: 0
      locktime:
        type: "integer"
        example: 0
      size:
        type: "integer"
        example: 100
      txid:
        type: "string"
        example: "8631dedfc6c46e6f923cd30e7e71cff541f205887b5cde7d0e1119121e3c563f"
      version:
        type: "integer"
        example: 1
      vsize:
        type: "integer"
        example: 100
      weight:
        type: "integer"
        example: 100
    description: "Detailed information about a transaction"
    example:
      address: "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2"
      vsize: 100
      locktime: 0
      size: 100
      fee: 0.001
      index: 0
      txid: "8631dedfc6c46e6f923cd30e7e71cff541f205887b5cde7d0e1119121e3c563f"
      weight: 100
      hex: "0000000000000000000000000000000000000000000000000000000000000000"
      version: 1
      hash: "0000000000000000000000000000000000000000000000000000000000000000"
      blockheight: 100
  types.ApiKey:
    type: "object"
    properties:
      created_at:
        type: "string"
      id:
        type: "string"
      rate_limit_max:
        type: "integer"
      rate_limit_window_secs:
        type: "integer"
      revoked:
        type: "boolean"
      subscription:
        $ref: "#/definitions/types.Subscription"
      subscription_id:
        type: "string"
        description: "* SubscriptionID is used to check for revoked and expired subscriptions"
      updated_at:
        type: "string"
      user_id:
        type: "string"
    example:
      rate_limit_max: 0
      subscription_id: "subscription_id"
      updated_at: "updated_at"
      user_id: "user_id"
      created_at: "created_at"
      id: "id"
      subscription:
        expires_at: "expires_at"
        user_id: "user_id"
        quota:
          rate_limit_max: 1
          total_request_quota: 5
          rate_limit_window_secs: 5
        created_at: "created_at"
        id: "id"
        type: {}
      revoked: true
      rate_limit_window_secs: 6
  types.Subscription:
    type: "object"
    properties:
      created_at:
        type: "string"
      expires_at:
        type: "string"
      id:
        type: "string"
      quota:
        $ref: "#/definitions/types.SubscriptionQuota"
      type:
        $ref: "#/definitions/types.SubscriptionType"
      user_id:
        type: "string"
    example:
      expires_at: "expires_at"
      user_id: "user_id"
      quota:
        rate_limit_max: 1
        total_request_quota: 5
        rate_limit_window_secs: 5
      created_at: "created_at"
      id: "id"
      type: {}
  types.SubscriptionQuota:
    type: "object"
    properties:
      rate_limit_max:
        type: "integer"
        description: "nil means unlimited"
      rate_limit_window_secs:
        type: "integer"
        description: "nil means unlimited"
      total_request_quota:
        type: "integer"
    example:
      rate_limit_max: 1
      total_request_quota: 5
      rate_limit_window_secs: 5
  types.SubscriptionType:
    type: "string"
    enum:
    - "free"
    - "tier1"
    - "tier2"
    - "tier3"
    x-enum-varnames:
    - "SubscriptionTypeFree"
    - "SubscriptionTypeTier1"
    - "SubscriptionTypeTier2"
    - "SubscriptionTypeTier3"
  types.UserApp:
    type: "object"
    properties:
      api_key:
        $ref: "#/definitions/types.ApiKey"
      api_key_id:
        type: "string"
      created_at:
        type: "string"
      id:
        type: "string"
      name:
        type: "string"
      subscription:
        $ref: "#/definitions/types.Subscription"
      subscription_id:
        type: "string"
      updated_at:
        type: "string"
      user_id:
        type: "string"
    example:
      subscription_id: "subscription_id"
      updated_at: "updated_at"
      api_key:
        rate_limit_max: 0
        subscription_id: "subscription_id"
        updated_at: "updated_at"
        user_id: "user_id"
        created_at: "created_at"
        id: "id"
        subscription:
          expires_at: "expires_at"
          user_id: "user_id"
          quota:
            rate_limit_max: 1
            total_request_quota: 5
            rate_limit_window_secs: 5
          created_at: "created_at"
          id: "id"
          type: {}
        revoked: true
        rate_limit_window_secs: 6
      user_id: "user_id"
      name: "name"
      created_at: "created_at"
      id: "id"
      subscription:
        expires_at: "expires_at"
        user_id: "user_id"
        quota:
          rate_limit_max: 1
          total_request_quota: 5
          rate_limit_window_secs: 5
        created_at: "created_at"
        id: "id"
        type: {}
      api_key_id: "api_key_id"
  inline_response_200:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/responses.GetAddressRunesBalanceListItem"
      responses.BaseResponse:
        $ref: "#/definitions/responses.BaseResponse"
    example:
      data:
      - amount: 52286
        spacedRune: "DECENTRALIZED"
        rune_id: "840000:3"
      - amount: 52286
        spacedRune: "DECENTRALIZED"
        rune_id: "840000:3"
      responses.BaseResponse:
        msg: "msg"
        code: 0
        data: ""
  responses.GetAddressTimeframeBalanceItem_blockRange:
    type: "object"
    description: "Time       time.Time  `json:\"time\"`"
